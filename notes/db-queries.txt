Fire up Python by running python on your terminal. Make sure your virtual environment is activated before you start the interpreter.

Once in the Python prompt, let's import the application, database instance, models and SQLAlchemy entry point:
>>> from app import app, db
>>> from app.models import User, Post
>>> import sqlalchemy as sa

For Flask and its extensions to have access to the Flask application without having to pass app as an argument into every function, an application context must be created and pushed.
>>> app.app_context().push()

Next, create a new user:
>>> u = User(username='john', email='john@example.com')
>>> db.session.add(u)
>>> db.session.commit()

Changes to a database are done in the context of a database session, which can be accessed as db.session. 
Multiple changes can be accumulated in a session and once all the changes have been registered you can issue a single db.session.commit(), which writes all the changes atomically. 
If at any time while working on a session there is an error, a call to db.session.rollback() will abort the session and remove any changes stored in it.
The application context that was pushed above allows Flask-SQLAlchemy to access the Flask application instance app without having to receive it as an argument. 
The extension looks in the app.config dictionary for the SQLALCHEMY_DATABASE_URI entry, which contains the database URL.

Let's add another user:
>>> u = User(username='susan', email='susan@example.com')
>>> db.session.add(u)
>>> db.session.commit()

The database can answer a query that returns all the users:
>>> query = sa.select(User)
>>> users = db.session.scalars(query).all()
>>> users
[<User john>, <User susan>]

The query variable in this example is assigned a basic query that selects all the users. 
This is achieved by passing the model class to the SQLAlchemy sa.select() query helper function.
The database session, which above was used to define and commit changes, is also used to execute queries. 
The db.session.scalars() method executes the database query and returns a results iterator. 
Calling the all() method of the results object converts the results to a plain list.

In many situations it is most efficient to use the results iterator in a for-loop instead of converting it to a list:
>>> users = db.session.scalars(query)
>>> for u in users:
...     print(u.id, u.username)
...
1 john
2 susan

SQLAlchemy configures integer primary key columns to be auto-incrementing.

If you know the id of a user, you can retrieve that user as follows:
>>> u = db.session.get(User, 1)
>>> u
<User john>

Now let's add a blog post:
>>> u = db.session.get(User, 1)
>>> p = Post(body='my first post!', author=u)
>>> db.session.add(p)
>>> db.session.commit()

>>> # get all posts written by a user
>>> u = db.session.get(User, 1)
>>> u
<User john>
>>> query = u.posts.select()
>>> posts = db.session.scalars(query).all()
>>> posts
[<Post my first post!>]

>>> # same, but with a user that has no posts
>>> u = db.session.get(User, 2)
>>> u
<User susan>
>>> query = u.posts.select()
>>> posts = db.session.scalars(query).all()
>>> posts
[]

>>> # print post author and body for all posts
>>> query = sa.select(Post)
>>> posts = db.session.scalars(query)
>>> for p in posts:
...     print(p.id, p.author.username, p.body)
...
1 john my first post!

# get all users in reverse alphabetical order
>>> query = sa.select(User).order_by(User.username.desc())
>>> db.session.scalars(query).all()
[<User susan>, <User john>]

# get all users that have usernames starting with "s"
>>> query = sa.select(User).where(User.username.like('s%'))
>>> db.session.scalars(query).all()
[<User susan>]

User model has a posts relationship attribute that was configured with the WriteOnlyMapped generic type. 
This is a special type of relationship that adds a select() method that returns a database query for the related items. 
The u.posts.select() expression takes care of generating the query that links the user to its blog posts.

The last query demonstrates how to filter the contents of a table using a condition. 
The where() clause is used to create filters that select only a subset of the rows from the entity selected. 
In this example I'm using the like() operator to select users based on a pattern.

To end, exit the Python shell and use the following commands to erase the test users and posts created above, so that the database is clean and ready for the next chapter:
(venv) $ flask db downgrade base
(venv) $ flask db upgrade

The first command tells Flask-Migrate to apply the database migrations in reverse order. 
When the downgrade command is not given a target, it downgrades one revision. 
The base target causes all migrations to be downgraded, until the database is left at its initial state, with no tables.

The upgrade command re-applies all the migrations in forward order. 
The default target for upgrades is head, which is a shortcut for the most recent migration. This command effectively restores the tables that were downgraded above. 
Since database migrations do not preserve the data stored in the database, downgrading and then upgrading has the effect of quickly emptying all the tables.